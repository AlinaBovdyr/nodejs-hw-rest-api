const request = require('supertest')
const jwt = require('jsonwebtoken')
require('dotenv').config()

const app = require('../app')
const { User, contacts, newContact } = require('../model/__mocks__/data')


const JWT_SECRET_KEY = process.env.JWT_SECRET_KEY
const issueToken = (payload, secret) => jwt.sign(payload, secret)
const token = issueToken({ id: User.id }, JWT_SECRET_KEY)
User.token = token

jest.mock('../model/contacts.js')
jest.mock('../model/users.js')

describe('Testing the route api/contacts', () => {
    describe('Should handle GET request', () => {
        test('Should return status 200 for GET: /contacts', async (done) => {
            const res = await request(app)
                .get('/api/contacts')
                .set('Authorization', `Bearer ${token}`)
            expect(res.status).toEqual(200)
            expect(res.body).toBeDefined()
            expect(res.body.data.contacts).toBeInstanceOf(Array)
            done()
        })
        test('Should return status 200 for GET: /contacts/:contactId', async (done) => {
            const contact = contacts[0]
            const res = await request(app)
                .get(`/api/contacts/${contact._id}`)
                .set('Authorization', `Bearer ${token}`)
            expect(res.status).toEqual(200)
            expect(res.body).toBeDefined()
            expect(res.body.data.contact._id).toBe(contact._id)
            done()
        })
        test('Should return status 404 for GET: /contacts/:contactId', async (done) => {
            const res = await request(app)
                .get('/api/contacts/618b1d76ef7ea210c43131c9')
                .set('Authorization', `Bearer ${token}`)
            expect(res.status).toEqual(404)
            expect(res.body).toBeDefined()
            done()
        })
        test('Should return status 400 for GET: /contacts/:contactId', async (done) => {
            const res = await request(app)
                .get('/api/contacts/6b1d76ef7ea210c431c9')
                .set('Authorization', `Bearer ${token}`)
            expect(res.status).toEqual(400)
            expect(res.body).toBeDefined()
            done()
        })
    })
    describe('Should handle POST request', () => {
        test('Should return status 201 for POST: /contacts', async (done) => {
            const res = await request(app)
                .post('/api/contacts')
                .set('Authorization', `Bearer ${token}`)
                .set('Accept', 'application/json')
                .send(newContact)
            expect(res.status).toEqual(201)
            expect(res.body).toBeDefined()
            idNewContact = res.body.data.contact._id
            done()
        })
        test('Should return status 400 for POST: /contacts wrong field', async (done) => {
            const res = await request(app)
                .post('/api/contacts')
                .set('Authorization', `Bearer ${token}`)
                .set('Accept', 'application/json')
                .send({...newContact, age: 12})
            expect(res.status).toEqual(400)
            expect(res.body).toBeDefined()
            done()
        })
        test('Should return status 400 for POST: /contacts without field', async (done) => {
            const res = await request(app)
                .post('/api/contacts')
                .set('Authorization', `Bearer ${token}`)
                .set('Accept', 'application/json')
                .send({ name: test })
            expect(res.status).toEqual(400)
            expect(res.body).toBeDefined()
            done()
        })
    })
    describe('Should handle PUT request', () => {
        test('Should return status 200 for PUT: /contacts/:contactId', async (done) => {
            const res = await request(app)
                .put(`/api/contacts/${idNewContact}`)
                .set('Authorization', `Bearer ${token}`)
                .set('Accept', 'application/json')
                .send({name: 'Boriska'})
            expect(res.status).toEqual(200)
            expect(res.body).toBeDefined()
            expect(res.body.data.contact.name).toBe('Boriska')
            done()
        })
        test('Should return status 400 for PUT: /contacts/:contactId wrong field', async (done) => {
            const res = await request(app)
                .put(`/api/contacts/${idNewContact}`)
                .set('Authorization', `Bearer ${token}`)
                .set('Accept', 'application/json')
                .send({ age: 12 })
            expect(res.status).toEqual(400)
            expect(res.body).toBeDefined()
            done()
        })
        test('Should return status 400 for PUT: /contacts/:contactId', async (done) => {
            const res = await request(app)
                .put('/api/contacts/618b1d76ef7ea210c43131c1')
                .set('Authorization', `Bearer ${token}`)
                .set('Accept', 'application/json')
                .send({ name: test })
            expect(res.status).toEqual(400)
            expect(res.body).toBeDefined()
            done()
        })
    })

    describe('Should handle PATCH request', () => {
        test('Should return status 200 for PATCH: /contacts/:contactId/favorite', async (done) => {
            const res = await request(app)
                .patch(`/api/contacts/${idNewContact}/favorite`)
                .set('Authorization', `Bearer ${token}`)
                .set('Accept', 'application/json')
                .send({favorite: true})
            expect(res.status).toEqual(200)
            expect(res.body).toBeDefined()
            expect(res.body.data.contact.favorite).toBe(true)
            done()
        })
        test('Should return status 400 for PATCH: /contacts/:contactId/favorite wrong field', async (done) => {
            const res = await request(app)
                .patch(`/api/contacts/${idNewContact}/favorite`)
                .set('Authorization', `Bearer ${token}`)
                .set('Accept', 'application/json')
                .send({ age: 12 })
            expect(res.status).toEqual(400)
            expect(res.body).toBeDefined()
            done()
        })
        test('Should return status 404 for PATCH: /contacts/:contactId/favorite', async (done) => {
            const res = await request(app)
                .patch(`/api/contacts/618b1d76ef7ea210c43131c9/favorite`)
                .set('Authorization', `Bearer ${token}`)
                .set('Accept', 'application/json')
                .send({favorite: true})
            expect(res.status).toEqual(404)
            expect(res.body).toBeDefined()
            done()
        })
    })

    describe('Should handle DELETE request', () => {
        const contact = contacts[1]
        test('Should return status 200 for DELETE: /contacts/:contactId', async (done) => {
            const res = await request(app)
                .delete(`/api/contacts/${contact._id}`)
                .set('Authorization', `Bearer ${token}`)
            expect(res.status).toEqual(200)
            expect(res.body).toBeDefined()
            expect(res.body.data.contact).toStrictEqual(contact)
            done()
        })
        test('Should return status 400 for DELETE: /contacts/:contactId wrong field', async (done) => {
            const res = await request(app)
                .delete('/api/contacts/74hj4787')
                .set('Authorization', `Bearer ${token}`)
            expect(res.status).toEqual(400)
            expect(res.body).toBeDefined()
            done()
        })
        test('Should return status 404 for DELETE: /contacts/:contactId', async (done) => {
            const res = await request(app)
                .delete('/api/contacts/618b1d76ef7ea210c43131c9')
                .set('Authorization', `Bearer ${token}`)
            expect(res.status).toEqual(404)
            expect(res.body).toBeDefined()
            done()
        })
    })
})